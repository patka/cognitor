package org.cognitor.server.platform.user.domain;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.Length;

import javax.validation.constraints.NotNull;
import java.io.Serializable;

/**
 * This entity represents the actual user that is able to login
 * into the system.
 *
 * The username is implemented with the email address since email
 * addresses have to be unique by nature and most people tend to
 * remember their email address rather than a username that might
 * be different on different platforms. It implies of course that
 * the username can be changed since users can change their email addresses.
 *
 * The id field represents the unique identifier that is generated by
 * the persistence layer. It is a {@link String} to be most flexible
 * with the choice of the underlying persistence system. It might require
 * to implement a custom type for this. E.g. Hibernate requires a numerical
 * identifier if a RDBMS sequence generator should be used.
 *
 * The id will be used by the application in order to generate the SSO id.
 * This is the id that will be rendered into the URL and that can be used by
 * other systems to store user information for one particular user. Therefore
 * it is very important that this id is immutable. Otherwise the connected
 * relying parties will not be able to connect the user data with the login
 * that is coming from Cognitor.
 *
 * Both email and password are required in order to save the User. Both fields
 * are annotated with JSR-303 validation annotations. The password should
 * also have a length of at least 6 and up to 100 characters.
 *
 * @author Patrick Kranz
 */
public class User implements Serializable {
    private static final long serialVersionUID = 1L;

    private String id;

    @Email
    @NotNull
    private String email;

    @Length(min = 6, max = 100)
    @NotNull
    private String password;

    /**
     * Default constructor that is mainly used by persistence implementations
     * that use reflection to load an entity and therefore require the presence
     * of a default constructor.
     */
    @SuppressWarnings("unused")
    public User() {
    }

    /**
     * Constructor that takes the email and the password.
     *
     * @param email the email that will work as the login name
     * @param password the password of the user
     */
    public User(String email, String password) {
        this.email = email;
        this.password = password;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    @SuppressWarnings("unused")
    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    @SuppressWarnings("unused")
    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("org.cognitor.server.platform.user.domain.User[id=");
        builder.append(id);
        builder.append("; email=");
        builder.append(email);
        builder.append("]");
        return builder.toString();
    }

}
